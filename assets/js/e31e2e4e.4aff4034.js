"use strict";(self.webpackChunk_1_inch_docs=self.webpackChunk_1_inch_docs||[]).push([[992],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=l(n),m=a,f=p["".concat(c,".").concat(m)]||p[m]||u[m]||o;return n?r.createElement(f,i(i({ref:t},d),{},{components:n})):r.createElement(f,i({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},20617:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return d},default:function(){return p}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),i=["components"],s={},c="Smart contracts",l={unversionedId:"liquidity-protocol/smart-contracts",id:"liquidity-protocol/smart-contracts",isDocsHomePage:!1,title:"Smart contracts",description:"AMM with a beautiful mind",source:"@site/docs/liquidity-protocol/smart-contracts.mdx",sourceDirName:"liquidity-protocol",slug:"/liquidity-protocol/smart-contracts",permalink:"/new-docs/docs/liquidity-protocol/smart-contracts",editUrl:"https://github.com/1inch/1inch-docs/edit/master/website/docs/liquidity-protocol/smart-contracts.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/new-docs/docs/liquidity-protocol/introduction"}},d=[{value:"Mainnet Contract Addresses",id:"mainnet-contract-addresses",children:[]},{value:"Swap",id:"swap",children:[]},{value:"Deposit",id:"deposit",children:[]},{value:"Withdraw",id:"withdraw",children:[]},{value:"Create new pool",id:"create-new-pool",children:[]}],u={toc:d};function p(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"smart-contracts"},"Smart contracts"),(0,o.kt)("p",null,"AMM with a beautiful mind"),(0,o.kt)("h2",{id:"mainnet-contract-addresses"},"Mainnet Contract Addresses"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://etherscan.io/address/0xbAF9A5d4b0052359326A6CDAb54BABAa3a3A9643"},"Mooniswap Factory"),"\n",(0,o.kt)("a",{parentName:"p",href:"https://etherscan.io/address/0x2eeA44E40930b1984F42078E836c659A12301E40"},"Referral Fee Receiver")),(0,o.kt)("h2",{id:"swap"},"Swap"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"/**\n* @param src address of the source token to exchange\n* @param dst token address that will received\n* @param amount amount to exchange\n* @param minReturn minimal amount of the dst token that will receive (if result < minReturn then transaction fails)\n* @param referral 1/20 from LP fees will be minted to referral wallet address (in liquidity token) (in case of address(0) no mints)\n* @return result received amount\n*/\nfunction swap(address src, address dst, uint256 amount, uint256 minReturn, address referral) external payable returns(uint256 result);\n")),(0,o.kt)("h2",{id:"deposit"},"Deposit"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"/**\n* @dev provide liquidity to the pool and earn on trading fees\n* @param amounts [amount0, amount1] for liquidity provision (each amount sorted by token0 and token1)\n* @param minAmounts minimal amounts that will be charged from sender address to liquidity pool (each amount sorted by token0 and token1)\n* @return fairSupply received liquidity token amount\n*/\nfunction deposit(uint256[2] calldata amounts, uint256[2] calldata minAmounts) external payable returns(uint256 fairSupply);\n")),(0,o.kt)("h2",{id:"withdraw"},"Withdraw"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"/**\n* @dev withdraw liquidity from the pool\n* @param amount amount to burn in exchange for underlying tokens\n* @param minReturns minimal amounts that will be transferred to sender address in underlying tokens  (each amount sorted by token0 and token1)\n*/\nfunction withdraw(uint256 amount, uint256[] memory minReturns) external;\n")),(0,o.kt)("h2",{id:"create-new-pool"},"Create new pool"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"/**\n* @dev tokens will be sorted and stored according to token0 < token1\n* @param tokenA\n* @param tokenB\n* @return pool created pool address\n*/\nfunction deploy(address tokenA, address tokenB) public returns(address pool);\n")))}p.isMDXComponent=!0}}]);