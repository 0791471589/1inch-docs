"use strict";(self.webpackChunk_1_inch_docs=self.webpackChunk_1_inch_docs||[]).push([[5641],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return u}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),d=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=d(e.components);return r.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=d(t),u=a,N=p["".concat(l,".").concat(u)]||p[u]||m[u]||o;return t?r.createElement(N,i(i({ref:n},s),{},{components:t})):r.createElement(N,i({ref:n},s))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=p;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var d=2;d<o;d++)i[d]=t[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},90402:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return s},default:function(){return p}});var r=t(87462),a=t(63366),o=(t(67294),t(3905)),i=["components"],c={sidebar_position:7},l="Nonce",d={unversionedId:"limit-order-protocol/utils/guide/nonce",id:"limit-order-protocol/utils/guide/nonce",isDocsHomePage:!1,title:"Nonce",description:"Nonce - this is the so-called series of limit orders.",source:"@site/docs/limit-order-protocol/utils/guide/nonce.md",sourceDirName:"limit-order-protocol/utils/guide",slug:"/limit-order-protocol/utils/guide/nonce",permalink:"/docs/limit-order-protocol/utils/guide/nonce",editUrl:"https://github.com/1inch/1inch-docs/edit/master/docs/limit-order-protocol/utils/guide/nonce.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Cancel all limit orders",permalink:"/docs/limit-order-protocol/utils/guide/cancel-all-limit-orders"},next:{title:"Predicate",permalink:"/docs/limit-order-protocol/utils/guide/predicate"}},s=[{value:"Difference between <code>LimitOrderProtocolFacade</code> and <code>SeriesNonceManagerFacade</code>",id:"difference-between-limitorderprotocolfacade-and-seriesnoncemanagerfacade",children:[]},{value:"For Limit Orders and P2P",id:"for-limit-orders-and-p2p",children:[{value:"Example:",id:"example",children:[]}]},{value:"For Gasless",id:"for-gasless",children:[{value:"Example:",id:"example-1",children:[]}]}],m={toc:s};function p(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"nonce"},"Nonce"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Nonce")," - this is the so-called ",(0,o.kt)("inlineCode",{parentName:"p"},"series")," of limit orders.",(0,o.kt)("br",{parentName:"p"}),"\n","The nonce is useful when you need to create a bunch of limit orders with the ability to cancel them all later."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Methods"),(0,o.kt)("th",{parentName:"tr",align:null},"Return type"),(0,o.kt)("th",{parentName:"tr",align:null},"Purpose"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"LimitOrderProtocolFacade.nonce(makerAddress)"),(0,o.kt)("br",null),(0,o.kt)("br",null),(0,o.kt)("inlineCode",{parentName:"td"},"SeriesNonceManagerFacade.nonce(series, makerAddress)")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"Promise<bigint>")),(0,o.kt)("td",{parentName:"tr",align:null},"Retrieves series nonce for specific address and exact series (order group)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"LimitOrderProtocolFacade.increaseNonce()"),(0,o.kt)("br",null),(0,o.kt)("br",null),(0,o.kt)("inlineCode",{parentName:"td"},"SeriesNonceManagerFacade.increaseNonce(series)")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"string")," (",(0,o.kt)("inlineCode",{parentName:"td"},"calldata"),")"),(0,o.kt)("td",{parentName:"tr",align:null},"Increasing nonce allows to cancel all previous limit-orders within increased series. See ",(0,o.kt)("a",{parentName:"td",href:"./predicate"},"predicate")," for more details.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"LimitOrderProtocolFacade.advanceNonce(count)"),(0,o.kt)("br",null),(0,o.kt)("br",null),(0,o.kt)("inlineCode",{parentName:"td"},"SeriesNonceManagerFacade.advanceNonce(series, count)")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"string")," (",(0,o.kt)("inlineCode",{parentName:"td"},"calldata"),")"),(0,o.kt)("td",{parentName:"tr",align:null},"Same as above, but increments nonce by specified ",(0,o.kt)("inlineCode",{parentName:"td"},"count"),". Mostly for developers purpose.")))),(0,o.kt)("h2",{id:"difference-between-limitorderprotocolfacade-and-seriesnoncemanagerfacade"},"Difference between ",(0,o.kt)("inlineCode",{parentName:"h2"},"LimitOrderProtocolFacade")," and ",(0,o.kt)("inlineCode",{parentName:"h2"},"SeriesNonceManagerFacade")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null}),(0,o.kt)("th",{parentName:"tr",align:null}))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Usual Limit-Order (default) and P2P"),(0,o.kt)("td",{parentName:"tr",align:null},"Should use ",(0,o.kt)("inlineCode",{parentName:"td"},"SeriesNonceManagerFacade")," for nonce management.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Gasless orders"),(0,o.kt)("td",{parentName:"tr",align:null},"Should use ",(0,o.kt)("inlineCode",{parentName:"td"},"LimitOrderProtocolFacade")," for nonce management.")))),(0,o.kt)("h2",{id:"for-limit-orders-and-p2p"},"For Limit Orders and P2P"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"WARNING!"))),(0,o.kt)("p",{parentName:"blockquote"},"Since limit-order-protocol V3 you shouldn't use LimitOrderProtocolFacade for ",(0,o.kt)("inlineCode",{parentName:"p"},"Nonce")," when creating usual Limit-Order or P2P."),(0,o.kt)("p",{parentName:"blockquote"},"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"SeriesNonceManagerFacade")," as it store those ",(0,o.kt)("inlineCode",{parentName:"p"},"Nonces")," now. ",(0,o.kt)("br",null),"\nUse ",(0,o.kt)("inlineCode",{parentName:"p"},"NonceSeriesV2")," to get possible series values."),(0,o.kt)("br",null),(0,o.kt)("p",{parentName:"blockquote"},"   Following change is necessary in order to use nonces in v3:"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"-    const nonce = limitOrderProtocolFacade.nonce(walletAddress)\n-    const predicate = limitOrderPredicateBuilder.nonceEquals(\n-        walletAddress,\n-        nonce,\n-    );\n\n+    const nonce = seriesNonceManagerFacade.nonce(NonceSeriesV2.LimitOrderV3, walletAddress);\n+    const predicate = seriesNonceManagerPredicateBuilder.timestampBelowAndNonceEquals(\n+        NonceSeriesV2.LimitOrderV3,\n+        expiration,\n+        nonce,\n+        walletAddress,\n+    );\n"))),(0,o.kt)("h3",{id:"example"},"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import Web3 from 'web3';\nimport {\n    limirOrderProtocolAdresses,\n    seriesNonceManagerContractAddresses,\n    LimitOrderBuilder,\n    LimitOrderProtocolFacade,\n    LimitOrderPredicateBuilder,\n    NonceSeriesV2,\n    SeriesNonceManagerFacade,\n    SeriesNonceManagerPredicateBuilder,\n    Web3ProviderConnector\n} from '@1inch/limit-order-protocol-utils';\n\nconst walletAddress = '0xhhh...';\nconst chainId = 1;\nconst contractAddress = limirOrderProtocolAdresses[chainId];\nconst seriesContractAddress = seriesNonceManagerContractAddresses[chainId];\n\nconst connector = new Web3ProviderConnector(new Web3('...'));\nconst limitOrderProtocolFacade = new LimitOrderProtocolFacade(contractAddress, chainId, connector);\nconst seriesNonceManagerFacade = new SeriesNonceManagerFacade(seriesContractAddress, chainId, connector);\nconst seriesNonceManagerPredicateBuilder = new SeriesNonceManagerPredicateBuilder(seriesContractAddress, chainId, connector);\nconst limitOrderPredicateBuilder = new LimitOrderPredicateBuilder(limitOrderProtocolFacade);\nconst limitOrderBuilder = new LimitOrderBuilder(\n    contractAddress,\n    chainId,\n    connector\n);\n\n// Get the current nonce\nconst nonce = await seriesNonceManagerFacade.getNonce(contractAddress);\n\nconst { arbitraryStaticCall, and, timestampBelow } = limitOrderPredicateBuilder;\n\n// Create a limit order with timestampBelow and nonceEquals predicate\n// Because timestampBelowAndNonceEquals is method of another contract arbitraryStaticCall() is necessary\nconst predicate = arbitraryStaticCall(\n    seriesNonceManagerPredicateBuilder.facade,\n    seriesNonceManagerPredicateBuilder.timestampBelowAndNonceEquals(\n        NonceSeriesV2.LimitOrderV3,\n        expiration,\n        nonce,\n        walletAddress,\n    ),\n);\nconst limitOrder = limitOrderBuilder.buildLimitOrder({\n    ...,\n    predicate\n});\n")),(0,o.kt)("p",null,"Cancellation example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// Cancel all v3 limit-orders by advance nonce, but not P2P, Gasless or anything else\nconst cancelAllOrdersCallData = seriesNonceManagerFacade.increaseNonce(\n    NonceSeriesV2.LimitOrderV3,\n);\nsendTransaction({\n    from: walletAddress,\n    gas: 210_000, // Set your gas limit\n    gasPrice: 40000, // Set your gas price\n    to: contractAddress,\n    data: cancelAllOrdersCallData,\n});\n")),(0,o.kt)("h2",{id:"for-gasless"},"For Gasless"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"Note"))),(0,o.kt)("p",{parentName:"blockquote"},"To make Gasless orders use less gas their own gas manager are hosted on same contract.\nUse ",(0,o.kt)("inlineCode",{parentName:"p"},"LimitOrderProtocolFacade")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"LimitOrderPredicateBuilder"))),(0,o.kt)("h3",{id:"example-1"},"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import Web3 from 'web3';\nimport {\n    limirOrderProtocolAdresses,\n    LimitOrderProtocolFacade,\n    LimitOrderPredicateBuilder,\n    NonceSeriesV2,\n    Web3ProviderConnector\n} from '@1inch/limit-order-protocol-utils';\n\nconst walletAddress = '0xhhh...';\nconst chainId = 1;\nconst contractAddress = limirOrderProtocolAdresses[chainId];\n\nconst connector = new Web3ProviderConnector(new Web3('...'));\nconst limitOrderProtocolFacade = new LimitOrderProtocolFacade(contractAddress, chainId, connector);\nconst limitOrderPredicateBuilder = new LimitOrderPredicateBuilder(limitOrderProtocolFacade);\nconst limitOrderBuilder = new LimitOrderBuilder(\n    contractAddress,\n    chainId,\n    connector\n);\n\n// Get the current nonce\nconst nonce = await limitOrderProtocolFacade.nonce(contractAddress);\nconst timestamp = Math.floor(Date.now() / 1000) + expireTimeSeconds;\n\n// Create a limit order with timestampBelowAndNonceEquals predicate\n// This is gas optimised predicate, so you dont need to construct and(timestampBelow(), nonceEquals())\nconst predicate = limitOrderPredicateBuilder.timestampBelowAndNonceEquals(\n    timestamp,\n    nonce,\n    walletAddress,\n);\nconst limitOrder = limitOrderBuilder.buildLimitOrder({\n    ...,\n    predicate\n});\n")),(0,o.kt)("p",null,"Cancellation example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// Cancel all Galsess orders by advance nonce, but not Limit-Orders, P2P or anything else\nconst cancelAllOrdersCallData = limitOrderProtocolFacade.increaseNonce();\nsendTransaction({\n    from: walletAddress,\n    gas: 210_000, // Set your gas limit\n    gasPrice: 40000, // Set your gas price\n    to: contractAddress,\n    data: cancelAllOrdersCallData,\n});\n")))}p.isMDXComponent=!0}}]);