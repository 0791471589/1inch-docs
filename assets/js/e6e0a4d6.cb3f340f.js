"use strict";(self.webpackChunk_1_inch_docs=self.webpackChunk_1_inch_docs||[]).push([[9058],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return m}});var i=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,i,o=function(e,t){if(null==e)return{};var r,i,o={},n=Object.keys(e);for(i=0;i<n.length;i++)r=n[i],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(i=0;i<n.length;i++)r=n[i],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=i.createContext({}),d=function(e){var t=i.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},s=function(e){var t=d(e.components);return i.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var r=e.components,o=e.mdxType,n=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=d(r),m=o,f=u["".concat(l,".").concat(m)]||u[m]||p[m]||n;return r?i.createElement(f,a(a({ref:t},s),{},{components:r})):i.createElement(f,a({ref:t},s))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=r.length,a=new Array(n);a[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var d=2;d<n;d++)a[d]=r[d];return i.createElement.apply(null,a)}return i.createElement.apply(null,r)}u.displayName="MDXCreateElement"},3605:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return s},default:function(){return u}});var i=r(87462),o=r(63366),n=(r(67294),r(3905)),a=["components"],c={sidebar_position:10},l="Validate a limit order",d={unversionedId:"limit-order-protocol/utils/guide/validate-limit-order",id:"limit-order-protocol/utils/guide/validate-limit-order",isDocsHomePage:!1,title:"Validate a limit order",description:"There is the possibility to check limit order validity.",source:"@site/docs/limit-order-protocol/utils/guide/validate-limit-order.md",sourceDirName:"limit-order-protocol/utils/guide",slug:"/limit-order-protocol/utils/guide/validate-limit-order",permalink:"/docs/limit-order-protocol/utils/guide/validate-limit-order",editUrl:"https://github.com/1inch/1inch-docs/edit/master/docs/limit-order-protocol/utils/guide/validate-limit-order.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Limit order remaining",permalink:"/docs/limit-order-protocol/utils/guide/remaining"},next:{title:"Interaction receiver",permalink:"/docs/limit-order-protocol/utils/guide/interactive-receiver"}},s=[{value:"<code>LimitOrderProtocolFacade.simulate</code>",id:"limitorderprotocolfacadesimulate",children:[]},{value:"<code>LimitOrderProtocolFacade.checkPredicate</code>",id:"limitorderprotocolfacadecheckpredicate",children:[]},{value:"Example:",id:"example",children:[]}],p={toc:s};function u(e){var t=e.components,r=(0,o.Z)(e,a);return(0,n.kt)("wrapper",(0,i.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"validate-a-limit-order"},"Validate a limit order"),(0,n.kt)("p",null,"There is the possibility to check limit order validity.",(0,n.kt)("br",{parentName:"p"}),"\n","For example, you can check that a limit order is valid by predicates."),(0,n.kt)("h2",{id:"limitorderprotocolfacadesimulate"},(0,n.kt)("inlineCode",{parentName:"h2"},"LimitOrderProtocolFacade.simulate")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"LimitOrderProtocolFacade.simulate(\n    targetAddress: string,\n    calldata: string\n)\n")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},(0,n.kt)("strong",{parentName:"p"},"Under the hood:"),(0,n.kt)("br",{parentName:"p"}),"\n","On a ",(0,n.kt)("inlineCode",{parentName:"p"},"simulate()")," call, the contract reverts with ",(0,n.kt)("inlineCode",{parentName:"p"},"error SimulationResults(bool success, bytes res)")),(0,n.kt)("p",{parentName:"blockquote"},"Where ",(0,n.kt)("inlineCode",{parentName:"p"},"success")," indicates that call doesn't revers, and ",(0,n.kt)("inlineCode",{parentName:"p"},"res")," is a function call result.")),(0,n.kt)("h2",{id:"limitorderprotocolfacadecheckpredicate"},(0,n.kt)("inlineCode",{parentName:"h2"},"LimitOrderProtocolFacade.checkPredicate")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"LimitOrderProtocolFacade.checkPredicate(\n    order: LimitOrder\n)\n")),(0,n.kt)("p",null,"More lightweight version, only ",(0,n.kt)("inlineCode",{parentName:"p"},"predicate")," field is required in order structure."),(0,n.kt)("h2",{id:"example"},"Example:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"import Web3 from 'web3';\nimport {\n    LimitOrderProtocolFacade,\n    LimitOrder,\n    Web3ProviderConnector\n} from '@1inch/limit-order-protocol-utils';\n\nconst contractAddress = limirOrderProtocolAdresses[chainId];\nconst order: LimitOrder = {...};\n\nconst connector = new Web3ProviderConnector(new Web3('...'));\nconst limitOrderProtocolFacade = new LimitOrderProtocolFacade(contractAddress, chainId, connector);\n\nconst {\n    success: boolean,\n    rawResult: string,\n} = await limitOrderProtocolFacade.simulate(contractAddress, order.predicate);\nconsole.log('Order validity: ', success);\n\nconst predicateValidity: boolean = limitOrderProtocolFacade.checkPredicate(order);\nconsole.log('Predicate validity: ', predicateValidity);\n\n")))}u.isMDXComponent=!0}}]);