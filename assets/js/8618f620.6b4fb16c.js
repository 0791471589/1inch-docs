"use strict";(self.webpackChunk_1_inch_docs=self.webpackChunk_1_inch_docs||[]).push([[5608],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),l=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):d(d({},t),e)),n},s=function(e){var t=l(e.components);return o.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),p=l(n),m=r,f=p["".concat(c,".").concat(m)]||p[m]||u[m]||a;return n?o.createElement(f,d(d({ref:t},s),{},{components:n})):o.createElement(f,d({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,d=new Array(a);d[0]=p;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,d[1]=i;for(var l=2;l<a;l++)d[l]=n[l];return o.createElement.apply(null,d)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},66922:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return s},default:function(){return p}});var o=n(87462),r=n(63366),a=(n(67294),n(3905)),d=["components"],i={sidebar_position:5},c="Quote params",l={unversionedId:"aggregation-protocol/api/quote-params",id:"aggregation-protocol/api/quote-params",isDocsHomePage:!1,title:"Quote params",description:"Find the best quote to exchange via 1inch router: /api/quote",source:"@site/docs/aggregation-protocol/api/quote-params.mdx",sourceDirName:"aggregation-protocol/api",slug:"/aggregation-protocol/api/quote-params",permalink:"/docs/aggregation-protocol/api/quote-params",editUrl:"https://github.com/1inch/1inch-docs/edit/master/docs/aggregation-protocol/api/quote-params.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Swap params",permalink:"/docs/aggregation-protocol/api/swap-params"},next:{title:"AggregationRouterV4",permalink:"/docs/aggregation-protocol/smart-contract/AggregationRouterV4"}},s=[{value:"Find the best quote to exchange via 1inch router: /api/quote",id:"find-the-best-quote-to-exchange-via-1inch-router-apiquote",children:[{value:"Description of query parameters",id:"description-of-query-parameters",children:[]},{value:"Description of response parameters",id:"description-of-response-parameters",children:[]}]}],u={toc:s};function p(e){var t=e.components,n=(0,r.Z)(e,d);return(0,a.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"quote-params"},"Quote params"),(0,a.kt)("h2",{id:"find-the-best-quote-to-exchange-via-1inch-router-apiquote"},"Find the best quote to exchange via 1inch router: ",(0,a.kt)("a",{parentName:"h2",href:"/docs/aggregation-protocol/api/swagger"},(0,a.kt)("inlineCode",{parentName:"a"},"/api/quote"))),(0,a.kt)("h3",{id:"description-of-query-parameters"},"Description of query parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",null,(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("strong",null,"Parameter name")),(0,a.kt)("td",null,(0,a.kt)("strong",null,"Type")),(0,a.kt)("td",null,(0,a.kt)("strong",null,"Description")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'<tbody>\n<tr>\n    <td><code>fromTokenAddress*</code></td>\n    <td>string</td>\n    <td>\n        contract address of a token to sell<br/>\n        e.g.: <code>0x6b175474e89094c44da98b954eedeac495271d0f</code>\n    </td>\n</tr>\n<tr>\n    <td><code>toTokenAddress*</code></td>\n    <td>string</td>\n    <td>\n        contract address of a token to buy<br/>\n        e.g.: <code>0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48</code>\n    </td>\n</tr>\n<tr>\n    <td><code>amount*</code></td>\n    <td>integer</td>\n    <td>\n        amount of a token to sell, set in minimal divisible units<br/>\n        e.g.:<br/>\n        <code>1.00 DAI</code> set as <code>1000000000000000000</code><br/>\n        <code>51.03 USDC</code> set as <code>51030000</code>\n    </td>\n</tr>\n<tr>\n    <td><code>fee</code></td>\n    <td>number</td>\n    <td>\n        this percentage of <code>fromTokenAddress</code> token amount will be sent to <code>referrerAddress</code>,<br/>\n        the rest will be used as input for a swap<br/>\n        <code>min: 0;</code> <code>max: 3;</code> <code>default: 0;</code><br/>\n        example to set a fee to 1.5%: <code>&fee=1.5</code>\n    </td>\n</tr>\n<tr>\n    <td><code>protocols</code></td>\n    <td>string</td>\n    <td>\n        specify liquidity protocols to use. If not set, all liquidity protocols will be used<br/>\n        e.g.: <code>&protocols=WETH,CURVE,BALANCER,...,ZRX</code><br/>\n        <code>default: all protocols can be used</code>\n    </td>\n</tr>\n<tr>\n    <td><code>gasPrice</code></td>\n    <td>string</td>\n    <td>\n        1inch takes in account gas expenses to determine exchange route. It is important to use the same gas price<br/>\n        on the quote and swap methods<br/>\n        gas price set in wei: <code>12.5 GWEI</code> set as <code>12500000000</code><br/>\n        <code>default: "fast" from the network</code>\n    </td>\n</tr>\n<tr>\n    <td><code>complexityLevel</code></td>\n    <td>string</td>\n    <td>\n        maximum number of token-connectors to be used in a transaction. The more is used \u2014 the longer route\n        estimation will take, the more complex route might be as a result. If not set, two token-connectors might be\n        used<br/>\n        <code>min: 0;</code> <code>max: 3;</code> <code>default: 2</code>\n    </td>\n</tr>\n<tr>\n    <td><code>connectorTokens</code></td>\n    <td>string</td>\n    <td>\n        token-connectors can be specified via this parameter. The more is set \u2014 the longer route estimation will\n        take. If not set, default token-connectors will be used. If token you want to exchange doesn\'t have a pool\n        with one of the default token-connectors, this parameter will help find the route;\n        should be the same for a quote and swap\n        e.g.:<br/>\n        <code>&connectorTokens=0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE,\n            0x6b175474e89094c44da98b954eedeac495271d0f</code><br/>\n        <code>default: list of dafault token-connectors</code>\n    </td>\n</tr>\n<tr>\n    <td><code>gasLimit</code></td>\n    <td>integer</td>\n    <td>\n        maximum amount of gas for a swap;<br/>\n        should be the same for a quote and swap<br/>\n        <code>default: 11500000;</code> <code>max: 11500000;</code>\n    </td>\n</tr>\n<tr>\n    <td><code>gasLimit</code></td>\n    <td>integer</td>\n    <td>\n        maximum amount of gas for a swap;<br/>\n        should be the same for a quote and swap<br/>\n        <code>default: 11500000;</code> <code>max: 11500000;</code>\n    </td>\n</tr>\n<tr>\n    <td><code>mainRouteParts</code></td>\n    <td>integer</td>\n    <td>\n        limit maximum number of main route parts;<br/>\n        should be the same for a quote and swap<br/>\n        <code>default: 20;</code> <code>max: 50;</code>\n    </td>\n</tr>\n<tr>\n    <td><code>parts</code></td>\n    <td>integer</td>\n    <td>\n        limit maximum number of parts each main route part can be split into; should be the same for a quote and swap<br/>\n        <code>default: 20;</code> <code>max: 100;</code>\n    </td>\n</tr>\n</tbody>\n'))),(0,a.kt)("h3",{id:"description-of-response-parameters"},"Description of response parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",null,(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("strong",null,"Parameter name")),(0,a.kt)("td",null,(0,a.kt)("strong",null,"Type")),(0,a.kt)("td",null,(0,a.kt)("strong",null,"Description")))),(0,a.kt)("tbody",null,(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("code",null,"fromToken")),(0,a.kt)("td",null,"string"),(0,a.kt)("td",null,"parameters of a token to sell")),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("code",null,"toToken")),(0,a.kt)("td",null,"string"),(0,a.kt)("td",null,"parameters of a token to buy")),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("code",null,"fromTokenAmount")),(0,a.kt)("td",null,"string"),(0,a.kt)("td",null,"input amount of ",(0,a.kt)("code",null,"fromToken")," in minimal divisible units")),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("code",null,"toTokenAmount")),(0,a.kt)("td",null,"string"),(0,a.kt)("td",null,"result amount of ",(0,a.kt)("code",null,"toToken")," in minimal divisible units")),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("code",null,"protocols")),(0,a.kt)("td",null,"string"),(0,a.kt)("td",null,"route of the trade")),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("code",null,"estimatedGas")),(0,a.kt)("td",null,"string"),(0,a.kt)("td",null,"rough estimated amount of the gas limit for used protocols;",(0,a.kt)("br",null),"do not use ",(0,a.kt)("code",null,"estimatedGas")," from the quote method as the gas limit of a transaction")))))}p.isMDXComponent=!0}}]);